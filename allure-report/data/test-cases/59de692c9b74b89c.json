{"uid":"59de692c9b74b89c","name":"TITLE OF THE TEST CASE IS #3","fullName":"testcases.test_search_emp_testcase.Test_searchch_empemp#test_search_emp_004","historyId":"bf819609efe3ce8dd9c673e6150aa485","time":{"start":1712856344761,"stop":1712856377305,"duration":32544},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=123.0.6312.106)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7B9B87032+63090]\n\t(No symbol) [0x00007FF7B9AF2C82]\n\t(No symbol) [0x00007FF7B998EB1D]\n\t(No symbol) [0x00007FF7B99CFA67]\n\t(No symbol) [0x00007FF7B99CE66B]\n\t(No symbol) [0x00007FF7B99F6FDA]\n\t(No symbol) [0x00007FF7B99CA00A]\n\t(No symbol) [0x00007FF7B99F71F0]\n\t(No symbol) [0x00007FF7B9A13412]\n\t(No symbol) [0x00007FF7B99F6D83]\n\t(No symbol) [0x00007FF7B99C83A8]\n\t(No symbol) [0x00007FF7B99C9441]\n\tGetHandleVerifier [0x00007FF7B9F825AD+4238317]\n\tGetHandleVerifier [0x00007FF7B9FBF70D+4488525]\n\tGetHandleVerifier [0x00007FF7B9FB79EF+4456495]\n\tGetHandleVerifier [0x00007FF7B9C60576+953270]\n\t(No symbol) [0x00007FF7B9AFE54F]\n\t(No symbol) [0x00007FF7B9AF9224]\n\t(No symbol) [0x00007FF7B9AF935B]\n\t(No symbol) [0x00007FF7B9AE9B94]\n\tBaseThreadInitThunk [0x00007FFC46AF7344+20]\n\tRtlUserThreadStart [0x00007FFC472626B1+33]","statusTrace":"self = <testcases.test_search_emp_testcase.Test_searchch_empemp object at 0x00000220555F12D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"89dab84575278c6297bda8bafcff5f6d\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.link(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    @allure.title(\"TITLE OF THE TEST CASE IS #3\")\n    @allure.story(\"THIS IS STORY #3\")\n    @allure.issue(\"THIS IS ISSUE #3\")\n    \n    def test_search_emp_004(self,setup):\n    \n        self.log.info(\"TESTCASE TEST_SEARCH_EMP_004 IS STARTED\")\n    \n        self.log.info(\"OPENING THE BROWSER\")\n    \n        self.log.info(\"MAXIMIZE THE BROWSER\")\n    \n        self.driver = setup\n    \n        self.obj = Test_ohrm_login(self.driver)\n    \n        self.log.info(\"NAVIGATING TO THE URL\")\n        self.obj.test_url(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    \n        self.log.info('ENTERING THE USERNAME')\n        self.obj.test_enter_username(self.USERNAME)\n    \n        self.log.info('ENTERING THE PASSWORD')\n        self.obj.test_enter_password(self.PASSWORD)\n    \n        self.log.info('CLICK ON LOGIN BUTTON')\n        self.obj.test_click_login()\n    \n        self.obj2 = Test_Add_Emp(self.driver)\n    \n        self.log.info(\"click on PIM tab\")\n        self.obj2.test_click_pim_tab()\n    \n        self.obj3 = Test_search_emp(self.driver)\n    \n        self.log.info(\"SEARCHIN FOR EMPLOYEE\");\n>       self.obj3.test_enter_search_emp(\"0377\");\n\ntestcases\\test_search_emp_testcase.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\test_search_emp_pages.py:14: in test_enter_search_emp\n    self.driver.find_element(*Test_search_emp.empid_tf_xp).send_keys(empid)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022055606690>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7B9AE9B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC46AF7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC472626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=123.0.6312.106)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B9B87032+63090]\nE       \t(No symbol) [0x00007FF7B9AF2C82]\nE       \t(No symbol) [0x00007FF7B998EB1D]\nE       \t(No symbol) [0x00007FF7B99CFA67]\nE       \t(No symbol) [0x00007FF7B99CE66B]\nE       \t(No symbol) [0x00007FF7B99F6FDA]\nE       \t(No symbol) [0x00007FF7B99CA00A]\nE       \t(No symbol) [0x00007FF7B99F71F0]\nE       \t(No symbol) [0x00007FF7B9A13412]\nE       \t(No symbol) [0x00007FF7B99F6D83]\nE       \t(No symbol) [0x00007FF7B99C83A8]\nE       \t(No symbol) [0x00007FF7B99C9441]\nE       \tGetHandleVerifier [0x00007FF7B9F825AD+4238317]\nE       \tGetHandleVerifier [0x00007FF7B9FBF70D+4488525]\nE       \tGetHandleVerifier [0x00007FF7B9FB79EF+4456495]\nE       \tGetHandleVerifier [0x00007FF7B9C60576+953270]\nE       \t(No symbol) [0x00007FF7B9AFE54F]\nE       \t(No symbol) [0x00007FF7B9AF9224]\nE       \t(No symbol) [0x00007FF7B9AF935B]\nE       \t(No symbol) [0x00007FF7B9AE9B94]\nE       \tBaseThreadInitThunk [0x00007FFC46AF7344+20]\nE       \tRtlUserThreadStart [0x00007FFC472626B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1712856341987,"stop":1712856341988,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"setup","time":{"start":1712856341988,"stop":1712856344760,"duration":2772},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=123.0.6312.106)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7B9B87032+63090]\n\t(No symbol) [0x00007FF7B9AF2C82]\n\t(No symbol) [0x00007FF7B998EB1D]\n\t(No symbol) [0x00007FF7B99CFA67]\n\t(No symbol) [0x00007FF7B99CE66B]\n\t(No symbol) [0x00007FF7B99F6FDA]\n\t(No symbol) [0x00007FF7B99CA00A]\n\t(No symbol) [0x00007FF7B99F71F0]\n\t(No symbol) [0x00007FF7B9A13412]\n\t(No symbol) [0x00007FF7B99F6D83]\n\t(No symbol) [0x00007FF7B99C83A8]\n\t(No symbol) [0x00007FF7B99C9441]\n\tGetHandleVerifier [0x00007FF7B9F825AD+4238317]\n\tGetHandleVerifier [0x00007FF7B9FBF70D+4488525]\n\tGetHandleVerifier [0x00007FF7B9FB79EF+4456495]\n\tGetHandleVerifier [0x00007FF7B9C60576+953270]\n\t(No symbol) [0x00007FF7B9AFE54F]\n\t(No symbol) [0x00007FF7B9AF9224]\n\t(No symbol) [0x00007FF7B9AF935B]\n\t(No symbol) [0x00007FF7B9AE9B94]\n\tBaseThreadInitThunk [0x00007FFC46AF7344+20]\n\tRtlUserThreadStart [0x00007FFC472626B1+33]","statusTrace":"self = <testcases.test_search_emp_testcase.Test_searchch_empemp object at 0x00000220555F12D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"89dab84575278c6297bda8bafcff5f6d\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.link(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    @allure.title(\"TITLE OF THE TEST CASE IS #3\")\n    @allure.story(\"THIS IS STORY #3\")\n    @allure.issue(\"THIS IS ISSUE #3\")\n    \n    def test_search_emp_004(self,setup):\n    \n        self.log.info(\"TESTCASE TEST_SEARCH_EMP_004 IS STARTED\")\n    \n        self.log.info(\"OPENING THE BROWSER\")\n    \n        self.log.info(\"MAXIMIZE THE BROWSER\")\n    \n        self.driver = setup\n    \n        self.obj = Test_ohrm_login(self.driver)\n    \n        self.log.info(\"NAVIGATING TO THE URL\")\n        self.obj.test_url(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    \n        self.log.info('ENTERING THE USERNAME')\n        self.obj.test_enter_username(self.USERNAME)\n    \n        self.log.info('ENTERING THE PASSWORD')\n        self.obj.test_enter_password(self.PASSWORD)\n    \n        self.log.info('CLICK ON LOGIN BUTTON')\n        self.obj.test_click_login()\n    \n        self.obj2 = Test_Add_Emp(self.driver)\n    \n        self.log.info(\"click on PIM tab\")\n        self.obj2.test_click_pim_tab()\n    \n        self.obj3 = Test_search_emp(self.driver)\n    \n        self.log.info(\"SEARCHIN FOR EMPLOYEE\");\n>       self.obj3.test_enter_search_emp(\"0377\");\n\ntestcases\\test_search_emp_testcase.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\test_search_emp_pages.py:14: in test_enter_search_emp\n    self.driver.find_element(*Test_search_emp.empid_tf_xp).send_keys(empid)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022055606690>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7B9AE9B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC46AF7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC472626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=123.0.6312.106)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B9B87032+63090]\nE       \t(No symbol) [0x00007FF7B9AF2C82]\nE       \t(No symbol) [0x00007FF7B998EB1D]\nE       \t(No symbol) [0x00007FF7B99CFA67]\nE       \t(No symbol) [0x00007FF7B99CE66B]\nE       \t(No symbol) [0x00007FF7B99F6FDA]\nE       \t(No symbol) [0x00007FF7B99CA00A]\nE       \t(No symbol) [0x00007FF7B99F71F0]\nE       \t(No symbol) [0x00007FF7B9A13412]\nE       \t(No symbol) [0x00007FF7B99F6D83]\nE       \t(No symbol) [0x00007FF7B99C83A8]\nE       \t(No symbol) [0x00007FF7B99C9441]\nE       \tGetHandleVerifier [0x00007FF7B9F825AD+4238317]\nE       \tGetHandleVerifier [0x00007FF7B9FBF70D+4488525]\nE       \tGetHandleVerifier [0x00007FF7B9FB79EF+4456495]\nE       \tGetHandleVerifier [0x00007FF7B9C60576+953270]\nE       \t(No symbol) [0x00007FF7B9AFE54F]\nE       \t(No symbol) [0x00007FF7B9AF9224]\nE       \t(No symbol) [0x00007FF7B9AF935B]\nE       \t(No symbol) [0x00007FF7B9AE9B94]\nE       \tBaseThreadInitThunk [0x00007FFC46AF7344+20]\nE       \tRtlUserThreadStart [0x00007FFC472626B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[],"attachments":[{"uid":"cf935aa669582881","name":"log","source":"cf935aa669582881.txt","type":"text/plain","size":837}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1712856377464,"stop":1712856379564,"duration":2100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"THIS IS STORY #3"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_search_emp_testcase"},{"name":"subSuite","value":"Test_searchch_empemp"},{"name":"host","value":"DESKTOP-HE9JJCJ"},{"name":"thread","value":"28868-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_search_emp_testcase"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"THIS IS ISSUE #3","url":"THIS IS ISSUE #3","type":"issue"},{"name":"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login","url":"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"59de692c9b74b89c.json","parameterValues":[]}